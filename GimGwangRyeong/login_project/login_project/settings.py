"""
Django settings for google_login_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG', 'False') == 'True'


ALLOWED_HOSTS = []

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.sites',
    'accounts',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.naver',
    'allauth.socialaccount.providers.kakao',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "login_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "login_project.wsgi.application"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "accountdb",
        "USER": "account",
        "PASSWORD":"djc05142",
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_TZ = True

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Django가 모델을 만들 때, 기본적으로 사용할 기본 키(Primary Key)의 타입을 지정합니다.
# BigAutoField는 매우 큰 숫자를 지원하여 데이터가 많아져도 문제가 없습니다.
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 소셜 로그인 처리 시, django-allauth의 기본 기능 대신 우리가 직접 만든 어댑터 클래스를 사용하도록 지정합니다.
SOCIALACCOUNT_ADAPTER = 'accounts.adapter.CustomSocialAccountAdapter'

# Django의 인증 시스템이 기본 User 모델 대신 우리가 만든 accounts 앱의 CustomUser 모델을 사용하도록 지정합니다.
AUTH_USER_MODEL = 'accounts.CustomUser'

# django-allauth가 사용자 모델에서 username으로 취급할 필드가 없다고 명시합니다. (이메일을 username처럼 사용하기 때문)
ACCOUNT_USER_MODEL_USERNAME_FIELD = None 

# 회원가입 시 이메일 필드를 필수로 설정합니다.
ACCOUNT_EMAIL_REQUIRED = True 

# 회원가입 시 username 필드를 사용자에게 요구하지 않도록 설정합니다.
ACCOUNT_USERNAME_REQUIRED = False 

# 로그인 시 'username' 대신 'email'을 사용하도록 설정합니다.
ACCOUNT_AUTHENTICATION_METHOD = 'email'

# 소셜 계정으로 처음 로그인할 때, 별도의 확인 절차 없이 자동으로 회원가입을 완료합니다.
SOCIALACCOUNT_AUTO_SIGNUP = True

# 로그아웃을 완료한 후 이동할 URL의 이름을 'home'으로 지정합니다.
ACCOUNT_LOGOUT_REDIRECT_URL = 'home'

# 회원가입 후 이메일 인증 절차를 사용하지 않도록 설정합니다. ('mandatory'로 설정 시 인증 필요)
ACCOUNT_EMAIL_VERIFICATION = 'none'
# 개발 및 테스트 편의를 위해, 소셜 로그인 과정을 GET 요청으로도 시작할 수 있도록 허용합니다.
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv('GOOGLE_CLIENT_ID'),
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),  
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'naver': {
        'SCOPE': [
            'name',      
            'email',     
            'nickname' 
        ],
        'APP': {
            'client_id': os.getenv("NAVER_CLIENT_ID"),
            'secret': os.getenv("NAVER_CLIENT_SECRET"),
            'key': '' 
        }
    },
    'kakao': {
        'SCOPE': [
            'profile_nickname',
            'account_email',
            'profile_image',
            'name'
        ],
        'APP': {
            'client_id': os.getenv("KAKAO_CLIENT_ID"),
            'secret': os.getenv("KAKAO_CLIENT_SECRET"),
            'key': '' 
        }
    }
}

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')